This folder will hold all of the source code for the project, including any 
testing suites, host controllers, firmware for hardware microcontrollers, 
and any other software written in support of the project.

== Dieharder ==

I don't currently know of a good way of "bundling" dieharder or otherwise 
testing for/expecting it in the host enivironment. For now, I am going to 
include the source tarball releases in my repo and build them locally 
for testing.

$ tar -xzvf dieharder-3.31.1.tgz
$ cd dieharder-3.31.1
$ libtoolize -f
$ ./autogen.sh
$ make

The build system seems at least a little wonky. I have to `libtoolize -f` 
in order for `make` to succeed. I'm not yet familiar enough with the GNU
autotools to tell you what's wrong with the configure.ac or Makefile.am 
input files.

Regardless, the software should build and then leave a functional `dieharder`
binary in the dieharder folder.

Testing Dieharder
=================

1.) cat /dev/urandom | dieharder OPTIONS

This is the easiest way.

2.) cat file.bin | dieharder OPTIONS

Also nice. However, file.bin must be a raw bitstream of 32-bit unsigned 
integers.

NOTES
=====

Some of the dieharder tests STILL rewind even with 4GB of random data. One 
of them rewound something like 60 times. 

60x4 = 240 GB = AIN'T NOBODY GOT SPACE FOR THAT!

The tests definitely run faster on the SSD on my laptop. But I don't have 
240GB to work with on my laptop. Will have to figure out a decent solution 
to this. Work from Vazzana implies that testing a RNG that outputs in kilobits 
per second could take hours if not days when using dieharder.
